import 'package:meta/meta.dart';
import 'package:json_annotation/json_annotation.dart';

part 'invoice.g.dart';

/// Object to represent a ChartMogul Invoice.
///
/// API docs: https://dev.chartmogul.com/reference#import-customers-invoices
@JsonSerializable()
class Invoice {
  const Invoice({
    @required this.externalId,
    @required this.date,
    @required this.currency,
    @required this.lineItems,
    this.customerUuid,
    this.uuid,
    this.dueDate,
    this.transactions,
    this.dataSourceUuid,
  });
  factory Invoice.fromJson(Map<String, dynamic> json) =>
      _$InvoiceFromJson(json);
  Map<String, dynamic> toJson() => _$InvoiceToJson(this);

  /// The UUID of the invoice object generated by ChartMogul.
  final String uuid;

  /// The ChartMogul UUID of the Customer that these invoices belong to.
  @JsonKey(name: 'customer_uuid')
  final String customerUuid;

  /// A unique identifier specified by you for the invoice. Typically the Invoice Number in your system. Accepts alphanumeric characters.
  @JsonKey(name: 'external_id', nullable: false)
  final String externalId;

  /// The date on which this invoice was raised. Must be an ISO 8601 formatted time. The timezone defaults to UTC unless otherwise specified. The time defaults to 00:00:00 unless specified otherwise.
  @JsonKey(name: 'date', nullable: false)
  final DateTime date;

  /// The 3-letter currency code of the currency in which this invoice is being billed, e.g. USD, EUR, GBP. You can refer to our full list of supported currencies.
  @JsonKey(name: 'currency', nullable: false)
  final String currency;

  /// A list of Line Item objects.
  @JsonKey(name: 'line_items', nullable: false)
  final List<LineItem> lineItems;

  /// A list of Transaction objects.
  @JsonKey(name: 'transactions')
  final List<Transaction> transactions;

  /// The date within which this invoice must be paid. Must be an ISO 8601 formatted time. The timezone defaults to UTC unless otherwise specified. The time defaults to 00:00:00 unless specified otherwise.
  @JsonKey(name: 'due_date')
  final DateTime dueDate;

  /// The ChartMogul UUID of the Data Source to which these invoices should be attributed. This parameter is normally optional but required when importing invoices for merged customers in ChartMogul.
  @JsonKey(name: 'data_source_uuid')
  final String dataSourceUuid;
}

enum LineItemType { subscription, one_time }

/// Object to represent a ChartMogul LineItem.
///
/// API docs: https://dev.chartmogul.com/reference#import-customers-invoices
@JsonSerializable()
class LineItem {
  const LineItem({
    @required this.type,
    @required this.amountInCents,
    this.uuid,
    this.subscriptionExternalId,
    this.subscriptionSetExternalId,
    this.planUuid,
    this.servicePeriodStart,
    this.servicePeriodEnd,
    this.cancelledAt,
    this.prorated,
    this.description,
    this.quantity,
    this.discountAmountInCents,
    this.discountCode,
    this.taxAmountInCents,
    this.transactionFeesInCents,
    this.externalId,
    this.accountCode,
  });
  factory LineItem.fromJson(Map<String, dynamic> json) =>
      _$LineItemFromJson(json);
  Map<String, dynamic> toJson() => _$LineItemToJson(this);

  /// The UUID of the line_item object generated by ChartMogul.
  final String uuid;

  /// One of either subscription or one_time.
  @JsonKey(nullable: false)
  final LineItemType type;

  /// A reference identifier for the subscription in your system. Accepts alphanumeric characters. Required for subscription line items.
  @JsonKey(name: 'subscription_external_id')
  final String subscriptionExternalId;

  /// A reference identifier for a set of subscriptions in order to group several subscriptions into one set.
  @JsonKey(name: 'subscription_set_external_id')
  final String subscriptionSetExternalId;

  /// The ChartMogul UUID of the plan for which this subscription is being charged.
  @JsonKey(name: 'plan_uuid')
  final String planUuid;

  /// The start of the service period for which this subscription is being charged. Must be an ISO 8601 formatted time. The timezone defaults to UTC unless otherwise specified. The time defaults to 00:00:00 unless specified otherwise.
  @JsonKey(name: 'service_period_start')
  final DateTime servicePeriodStart;

  /// The end of the service period for which this subscription is being charged. Must be an ISO 8601 formatted time. The timezone defaults to UTC unless otherwise specified. The time defaults to 00:00:00 unless specified otherwise.
  @JsonKey(name: 'service_period_end')
  final DateTime servicePeriodEnd;

  /// The final amount charged towards this line item, for the specified quantity and service period, after discounts, taxes and fees have been applied. Expected in cents (or pence for GBP, etc.)
  @JsonKey(name: 'amount_in_cents')
  final int amountInCents;

  /// If this subscription has been cancelled, the time of cancellation. Must be an ISO 8601 formatted time. The timezone defaults to UTC unless otherwise specified. The time defaults to 00:00:00 unless otherwise specified.
  @JsonKey(name: 'cancelled_at')
  final DateTime cancelledAt;

  /// If this is a prorated charge, then set this attribute to true.
  @JsonKey(name: 'prorated')
  final bool prorated;

  /// A short description of the non-recurring item being charged to the customer.
  @JsonKey(name: 'description')
  final String description;

  /// The quantity of this line item being billed. Can be any non-zero integer. Defaults to 1.
  @JsonKey(name: 'quantity')
  final int quantity;

  /// If any discount has been applied to this line item, then the discount amount in cents. Defaults to 0.
  @JsonKey(name: 'discount_amount_in_cents')
  final int discountAmountInCents;

  /// If a discount has been applied to this line item, then an optional reference code to identify the discount.
  @JsonKey(name: 'discount_code')
  final String discountCode;

  /// The tax that has been applied to this line item, in cents. Defaults to 0.
  @JsonKey(name: 'tax_amount_in_cents')
  final int taxAmountInCents;

  /// The final total transaction fees paid to billing provider and/or payment processor for this line item. Expected in cents (or pence for GBP, etc.).
  @JsonKey(name: 'transaction_fees_in_cents')
  final int transactionFeesInCents;

  /// A unique identifier specified by you for the line item. Typically an identifier from your internal system. Accepts alphanumeric characters.
  @JsonKey(name: 'external_id')
  final String externalId;

  /// The unique account code of this line item used for the purposes of accounting and revenue recognition. Also called "account number" in some systems. Accepts a maximum of 30 alphanumeric characters.
  @JsonKey(name: 'account_code')
  final String accountCode;
}

enum TransactionType { payment, refund }
enum TransactionResult { successful, failed }

/// Object to represent a ChartMogul Transaction.
///
/// API docs: https://dev.chartmogul.com/reference#import-customers-invoices
@JsonSerializable()
class Transaction {
  const Transaction({
    @required this.date,
    @required this.type,
    @required this.result,
    this.uuid,
    this.externalId,
  });
  factory Transaction.fromJson(Map<String, dynamic> json) =>
      _$TransactionFromJson(json);
  Map<String, dynamic> toJson() => _$TransactionToJson(this);

  /// The UUID of the transaction object generated by ChartMogul.
  final String uuid;

  /// The timestamp of when the transaction was attempted. Must be an ISO 8601 formatted time. The timezone defaults to UTC unless otherwise specified. The time defaults to 00:00:00 unless specified otherwise.
  @JsonKey(nullable: false)
  final DateTime date;

  /// Either one of payment or refund.
  @JsonKey(nullable: false)
  final TransactionType type;

  /// Either one of successful or failed.
  @JsonKey(nullable: false)
  final TransactionResult result;

  /// A unique identifier specified by you for the transaction. Typically an identifier from your internal system. Accepts alphanumeric characters.
  @JsonKey(name: 'external_id')
  final String externalId;
}

@JsonSerializable()
class InvoiceResults {
  const InvoiceResults({
    this.entries,
    this.currentPage,
    this.totalPages,
    this.customerUuid,
  });

  factory InvoiceResults.fromJson(Map<String, dynamic> json) =>
      _$InvoiceResultsFromJson(json);

  /// An array of customer objects from the API.
  @JsonKey(name: 'invoices')
  final List<Invoice> entries;

  /// The page number of this response.
  @JsonKey(name: 'current_page')
  final int currentPage;

  /// The total number of pages with results for this request.
  @JsonKey(name: 'total_pages')
  final int totalPages;

  /// The customer UUID used to filter this request.
  @JsonKey(name: 'customer_uuid')
  final String customerUuid;
}
