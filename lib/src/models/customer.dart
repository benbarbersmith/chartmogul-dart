import 'package:meta/meta.dart';
import 'package:json_annotation/json_annotation.dart';

import 'address.dart';
import 'customer_attributes.dart';

part 'customer.g.dart';

/// Object to represent a ChartMogul Customer.
///
/// Example Customer JSON:
///
/// {
///   "id": 74596,
///   "uuid": "cus_f466e33d-ff2b-4a11-8f85-417eb02157a7",
///   "external_id": "cus_0001",
///   "name": "Adam Smith",
///   "email": "adam@smith.com",
///   "status": "Lead",
///   "customer-since": null,
///   "attributes": {
///     "custom": {
///       "channel": "Facebook",
///       "age": 18
///     },
///     "clearbit": {},
///     "stripe": {},
///     "tags": [
///       "important",
///       "Prio1"
///     ]
///   },
///   "data_source_uuid": "ds_fef05d54-47b4-431b-aed2-eb6b9e545430",
///   "data_source_uuids": [
///     "ds_fef05d54-47b4-431b-aed2-eb6b9e545430"
///   ],
///   "external_ids": [
///     "cus_0001"
///   ],
///   "company": "",
///   "country": "US",
///   "state": null,
///   "city": "New York",
///   "zip": null,
///   "lead_created_at": "2015-10-14T00:00:00Z",
///   "free_trial_started_at": "2015-11-01T00:00:00Z",
///   "address": {
///     "country": "United States",
///     "state": null,
///     "city": "New York",
///     "address_zip": null
///   },
///   "mrr": 0,
///   "arr": 0,
///   "billing-system-url": null,
///   "chartmogul-url": "https://app.chartmogul.com/#customers/74596-Adam_Smith",
///   "billing-system-type": "Import API",
///   "currency": "USD",
///   "currency-sign": "$"
/// }
@JsonSerializable()
class Customer {
  const Customer({
    @required this.dataSourceUuid,
    @required this.externalId,
    @required this.name,
    this.uuid,
    this.id,
    this.email,
    this.company,
    this.status,
    this.externalIds,
    this.dataSourceUuids,
    this.leadCreatedAt,
    this.freeTrialStartedAt,
    this.customerSince,
    this.address,
    this.attributes,
    this.mrr,
    this.arr,
    this.billingSystemUrl,
    this.chartmogulUrl,
    this.billingSystemType,
    this.currency,
    this.currencySign,
  });
  factory Customer.fromJson(Map<String, dynamic> json) =>
      _$CustomerFromJson(json);
  Map<String, dynamic> toJson() => _$CustomerToJson(this);

  /// The internal ChartMogul ID of the customer object.
  final int id;

  /// The UUID of the customer object generated by ChartMogul.
  final String uuid;

  /// The unique external identifier for this customer, if any.
  @JsonKey(name: 'external_id', required: true)
  final String externalId;

  /// An array containing the unique external identifiers of all customer records that have been merged into this customer.
  @JsonKey(name: 'external_ids')
  final List<String> externalIds;

  /// The ChartMogul UUID of the data source of this customer.
  @JsonKey(name: 'data_source_uuid', required: true)
  final String dataSourceUuid;

  /// An array containing the ChartMogul UUIDs of all data sources that contribute data to this customer. This is most relevant for merged customers.
  @JsonKey(name: 'data_source_uuids')
  final List<String> dataSourceUuids;

  /// The name of this customer.
  @JsonKey(required: true)
  final String name;

  /// This customer's email address.
  final String email;

  /// This customer's company name.
  final String company;

  /// The status of this customer. One of Lead, Active, Past due or Cancelled.
  final String status;

  /// The time at which this customer was established as a lead, as specified by you.
  @JsonKey(name: 'lead_created_at')
  final DateTime leadCreatedAt;

  /// The time at which this customer started a free trial of your product or service, as specified by you.
  @JsonKey(name: 'free_trial_started_at')
  final DateTime freeTrialStartedAt;

  /// An RFC3339 formatted datetime attribute indicating when the customer first started paying for a subscription.
  @JsonKey(name: 'customer-since')
  final DateTime customerSince;

  /// An object representing this customer's address.
  final Address address;

  /// An object representing this customer's attributes.
  final CustomerAttributes attributes;

  /// The current monthly recurring revenue for this customer, expressed in the currency selected for your account, as an integer number of cents. Divide by 100 to obtain the actual amount.
  final int mrr;

  /// The current annual run rate for this customer, also expressed as an integer number of cents in your account's selected currency.
  final int arr;

  /// A URL for this customer's data in your billing system, if available.
  @JsonKey(name: 'billing-system-url')
  final String billingSystemUrl;

  /// The URL for this customer's ChartMogul page. This is only accessible to a user logged in to your ChartMogul account.
  @JsonKey(name: 'chartmogul-url')
  final String chartmogulUrl;

  /// The type of the billing system from where the customer was imported to ChartMogul. For example, Stripe, Recurly, Chargify, or Import API.
  @JsonKey(name: 'billing-system-type')
  final String billingSystemType;

  /// The currency of the MRR readings for this customer.
  final String currency;

  /// Text representation to display the currency. E.g. $, or â‚¬.
  @JsonKey(name: 'currency-sign')
  final String currencySign;
}

@JsonSerializable()
class CustomerResults {
  const CustomerResults({
    this.entries,
    this.perPage,
    this.page,
    this.currentPage,
    this.totalPages,
    this.hasMore,
  });

  factory CustomerResults.fromJson(Map<String, dynamic> json) =>
      _$CustomerResultsFromJson(json);

  /// An array of customer objects from the API.
  final List<Customer> entries;

  /// The number of results in this response.
  @JsonKey(name: 'per_page')
  final int perPage;

  /// The page number of this response.
  final int page;

  /// The page number of this response.
  @JsonKey(name: 'current_page')
  final int currentPage;

  /// The total number of pages with results for this request.
  @JsonKey(name: 'total_pages')
  final int totalPages;

  /// One of true or false depending on whether there are more pages with results for this request.
  @JsonKey(name: 'has_more')
  final bool hasMore;
}
